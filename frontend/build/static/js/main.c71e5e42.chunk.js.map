{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","value","target","name","formData","state","setState","handlePredictClick","isLoading","fetch","headers","Accept","Content-Type","method","body","JSON","stringify","then","response","json","result","handleCancelClick","sepalLength","sepalWidth","petalLength","petalWidth","sepalWidths","i","toFixed","push","react_default","a","createElement","key","petalLengths","petalWidths","Container_default","className","Form_default","Row","Group","as","Col","Label","Control","type","onChange","Row_default","Col_default","Button_default","block","variant","disabled","onClick","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c71e5e42.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tisLoading: false,\n\t\t\tformData: {\n\t\t\t\tsepalLength: 4,\n\t\t\t\tsepalWidth: 2,\n\t\t\t\tpetalLength: 1,\n\t\t\t\tpetalWidth: 0,\n\t\t\t},\n\t\t\tresult: \"\",\n\t\t};\n\t}\n\n\thandleChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tconst name = event.target.name;\n\t\tvar formData = this.state.formData;\n\t\tformData[name] = value;\n\t\tthis.setState({\n\t\t\tformData,\n\t\t});\n\t};\n\n\thandlePredictClick = (event) => {\n\t\tconst formData = this.state.formData;\n\t\tthis.setState({ isLoading: true });\n\t\tfetch(\"http://127.0.0.1:5000/prediction/\", {\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tmethod: \"POST\",\n\t\t\tbody: JSON.stringify(formData),\n\t\t})\n\t\t\t.then((response) => response.json())\n\t\t\t.then((response) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tresult: response.result,\n\t\t\t\t\tisLoading: false,\n\t\t\t\t});\n\t\t\t});\n\t};\n\n\thandleCancelClick = (event) => {\n\t\tthis.setState({ result: \"\" });\n\t};\n\n\trender() {\n\t\tconst isLoading = this.state.isLoading;\n\t\tconst formData = this.state.formData;\n\t\tconst result = this.state.result;\n\n\t\tvar sepalWidths = [];\n\t\tfor (var i = 2; i <= 4; i = +(i + 0.1).toFixed(1)) {\n\t\t\tsepalWidths.push(\n\t\t\t\t<option key={i} value={i}>\n\t\t\t\t\t{i}\n\t\t\t\t</option>\n\t\t\t);\n\t\t}\n\t\tvar petalLengths = [];\n\t\tfor (var i = 1; i <= 6; i = +(i + 0.1).toFixed(1)) {\n\t\t\tpetalLengths.push(\n\t\t\t\t<option key={i} value={i}>\n\t\t\t\t\t{i}\n\t\t\t\t</option>\n\t\t\t);\n\t\t}\n\t\tvar petalWidths = [];\n\t\tfor (var i = 0.1; i <= 3; i = +(i + 0.1).toFixed(1)) {\n\t\t\tpetalWidths.push(\n\t\t\t\t<option key={i} value={i}>\n\t\t\t\t\t{i}\n\t\t\t\t</option>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<div>\n\t\t\t\t\t<h1 className=\"title\">Iris Plant Classifier</h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"content\">\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t\t<Form.Group as={Col}>\n\t\t\t\t\t\t\t\t<Form.Label>Sepal Length</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={formData.sepalLength}\n\t\t\t\t\t\t\t\t\tname=\"sepalLength\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t></Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group as={Col}>\n\t\t\t\t\t\t\t\t<Form.Label>Sepal Width</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={formData.sepalWidth}\n\t\t\t\t\t\t\t\t\tname=\"sepalWidth\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t></Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Form.Row>\n\t\t\t\t\t\t<Form.Row>\n\t\t\t\t\t\t\t<Form.Group as={Col}>\n\t\t\t\t\t\t\t\t<Form.Label>Petal Length</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tvalue={formData.petalLength}\n\t\t\t\t\t\t\t\t\tname=\"petalLength\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t></Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t<Form.Group as={Col}>\n\t\t\t\t\t\t\t\t<Form.Label>Petal Width</Form.Label>\n\t\t\t\t\t\t\t\t<Form.Control\n\t\t\t\t\t\t\t\t\tvalue={formData.petalWidth}\n\t\t\t\t\t\t\t\t\tname=\"petalWidth\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t\t\t\t></Form.Control>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Form.Row>\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\t\tvariant=\"success\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\t\tonClick={!isLoading ? this.handlePredictClick : null}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{isLoading ? \"Making prediction\" : \"Predict\"}\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tblock\n\t\t\t\t\t\t\t\t\tvariant=\"danger\"\n\t\t\t\t\t\t\t\t\tdisabled={isLoading}\n\t\t\t\t\t\t\t\t\tonClick={this.handleCancelClick}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tReset prediction\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Form>\n\t\t\t\t\t{result === \"\" ? null : (\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col className=\"result-container\">\n\t\t\t\t\t\t\t\t<h5 id=\"result\">{result}</h5>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}